// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Home row mods macro

#define default_l 0
#define nums_l    1
#define syms_l    2
#define arrows_l  3
#define tmux_l    4
#define helper_l  5
#define window_l  6


// #define HRML(k1,k2,k3,k4) &ht LSHFT k1  &ht LALT k2  &ht LCTRL k3  &ht LGUI k4
// #define HRMR(k1,k2,k3,k4) &ht RGUI k1  &ht RCTRL k2  &ht RALT k3  &ht RSHFT k4

/ {

        macros {
            ZMK_MACRO(ff_tab,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp LG(L) &kp PERCENT &kp SPACE >;
                )
            ZMK_MACRO(t_0,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp N0 >;
                )

            ZMK_MACRO(t_1,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp N1>;
                )

            ZMK_MACRO(t_2,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp N2 >;
                )

            ZMK_MACRO(t_3,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp N3>;
                )

            ZMK_MACRO(t_4,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp N4 >;
                )

            ZMK_MACRO(t_5,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp N5 >;
                )

            ZMK_MACRO(t_6,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp N6 >;
                )

            ZMK_MACRO(t_7,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp N7 >;
                )

            ZMK_MACRO(t_8,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp N8 >;
                )

            ZMK_MACRO(t_9,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp N9 >;
                )

            ZMK_MACRO(t_LEFT,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp LEFT >;
                )

            ZMK_MACRO(t_RIGHT,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp RIGHT >;
                )

            ZMK_MACRO(t_UP,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp UP >;
                )

            ZMK_MACRO(t_DOWN,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp DOWN >;
                )

            ZMK_MACRO(t_scroll,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp PG_UP >;
                )

            ZMK_MACRO(t_hsplit,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp MINUS >;
                )

            ZMK_MACRO(t_vsplit,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp PIPE >;
                )


            ZMK_MACRO(t_kwin,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp AMPS >;
                )
            ZMK_MACRO(t_new,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp C >;
                )

            ZMK_MACRO(t_name,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp COMMA >;
                )

            ZMK_MACRO(t_kpane,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp X >;
                )
            ZMK_MACRO(skshft,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&sk LSHIFT >;
                )


            ZMK_MACRO(t_f1,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp F1>;
                )

            ZMK_MACRO(t_f2,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp F2 >;
                )

            ZMK_MACRO(t_f3,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp F3>;
                )

            ZMK_MACRO(t_f4,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &sl 5 >;
                )

            ZMK_MACRO(t_f5,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp F5 >;
                )

            ZMK_MACRO(t_f6,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp F6 >;
                )

            ZMK_MACRO(t_f7,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp F7 >;
                )

            ZMK_MACRO(t_f8,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp F8 >;
                )

            ZMK_MACRO(t_f9,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp F9 >;
                )

                
    };
    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp ESC>;
            layers = <0 1 2>;
        };
         combo_sk_alt {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&sk LALT>;
            layers = <0 1 2>;
        };
         combo_iterm {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp LC(BSLH)>;
            layers = <0 1 2>;
        };
         combo_sk_ctrl {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&tdLCTL>;
            layers = <0 1 2>;
        };
        
         combo_backslash {
            timeout-ms = <50>;
            key-positions = <5 6>;
            bindings = <&kp BSLH>;
            layers = <0 1 2 8>;
        };
         combo_backspace {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp BACKSPACE>;
            layers = <0 1 2 8>;
        };
        combo_backspace_fast {
            timeout-ms = <15>;
            key-positions = <17 18>;
            bindings = <&kp BACKSPACE>;
            layers = <0 3>;
        };
        
            combo_repeat {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&key_repeat>;
            layers = <0 1 2>;
        };
            combo_repeat_artsey {
            timeout-ms = <50>;
            key-positions = <16 26>;
            bindings = <&key_repeat>;
            layers = <3>;
        };
         combo_sk_lgui {
            timeout-ms = <100>;
            key-positions = <2 12>;
            bindings = <&sk LGUI>;
            layers = <0 1 2>;
        };
         combo_sk_rgui {
            timeout-ms = <100>;
            key-positions = <7 17>;
            bindings = <&sk RGUI>;
            layers = <0 1 2 3>;
        };
        
            combo_tab {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&kp TAB>;
            layers = <0 1 2>;
        };
        
            combo_colon {
            timeout-ms = <100>;
            key-positions = <17 27>;
            bindings = <&kp COLN>;
            layers = <0 1 2>;
        };



        
        
           combo_meh_layer {
            timeout-ms = <50>;
            key-positions = <3 13>;
            bindings = <&sl 7>;
            layers = <0 1 2>;
        };
           combo_copy {
            timeout-ms = <120>;
            key-positions = <21 23>;
            bindings = <&kp LG(C)>;
            layers = <0 1 2>;
        };
           combo_alfred {
            timeout-ms = <50>;
            key-positions = <6 16>;
            bindings = <&kp LA(SPACE)>;
            layers = <0 1 2 3>;
        };
           combo_paste {
            timeout-ms = <120>;
            key-positions = <21 22 23>;
            bindings = <&kp LG(V)>;
            layers = <0 1 2>;
        };
            combo_caps_word {
            timeout-ms = <120>;
            key-positions = <11 12 13>;
            bindings = <&caps_word>;
            layers = <0 1 2>;
        };
        /*
        * SYMBOL COMBOS
        */
           combo_lbrc {
            timeout-ms = <120>;
            key-positions = <2 3>;
            bindings = <&kp LBRC>;
            layers = <0 1 2>;
        };
                   combo_rbrc {
            timeout-ms = <120>;
            key-positions = <3 4>;
            bindings = <&kp RBRC >;
            layers = <0 1 2>;
        };
                   combo_rprn {
            timeout-ms = <50>;
            key-positions = <6 7>;
            bindings = <&kp LPRN>;
            layers = <0 1 2 8>;
        };
                   combo_lbrn {
            timeout-ms = <120>;
            key-positions = <7 8>;
            bindings = <&kp RPRN>;
            layers = <0 1 2 8>;
        };
                   combo_qstn {
            timeout-ms = <120>;
            key-positions = <1 11>;
            bindings = <&kp QMARK>;
            layers = <0 1 2>;
        };
                   combo_exclm {
            timeout-ms = <120>;
            key-positions = <11 21>;
            bindings = <&kp EXCL>;
            layers = <0 1 2>;
        };
                   combo_rbrk {
            timeout-ms = <120>;
            key-positions = <12 21>;
            bindings = <&kp LBKT>;
            layers = <0 1 2>;
        };
        combo_emailat {
            timeout-ms = <120>;
            key-positions = <15 6>;
            bindings = <&kp AT>;
            layers = <0 1 2>;
        };
        combo_carrot {
            timeout-ms = <120>;
            key-positions = <2 11>;
            bindings = <&kp CARET>;
            layers = <0 1 2>;
        };
                   combo_lbrk {
            timeout-ms = <120>;
            key-positions = <12 23>;
            bindings = <&kp RBKT>;
            layers = <0 1 2>;
        };
                   combo_underscore {
            timeout-ms = <120>;
            key-positions = <23 24>;
            bindings = <&kp UNDER>;
            layers = <0 1 2>;
        };
                     combo_equal {
            timeout-ms = <120>;
            key-positions = <26 27>;
            bindings = <&kp EQUAL>;
            layers = <0 1 2>;
        };
                   combo_ast {
            timeout-ms = <120>;
            key-positions = <25 16 >;
            bindings = <&kp ASTERISK>;
            layers = <0 1 2>;
        };
                   combo_hash {
            timeout-ms = <120>;
            key-positions = <8 18>;
            bindings = <&kp HASH>;
            layers = <0 1 2>;
        };
                   combo_fslash {
            timeout-ms = <120>;
            key-positions = <16 26>;
            bindings = <&kp FSLH>;
            layers = <0 1 2>;
        };
        
                   combo_plus {
            timeout-ms = <120>;
            key-positions = <25 26>;
            bindings = <&kp PLUS>;
            layers = <0 1 2>;
        };
                   combo_percent {
            timeout-ms = <120>;
            key-positions = <18 28>;
            bindings = <&kp PERCENT>;
            layers = <0 1 2>;
        };
                   combo_semicolon {
            timeout-ms = <120>;
            key-positions = <4 14>;
            bindings = <&kp SEMICOLON >;
            layers = <0 1 2>; 
        };
          
                   combo_tilda {
            timeout-ms = <120>;
            key-positions = <2 13>;
            bindings = <&kp TILDE>;
            layers = <0 1 2>;
        };
                   combo_dash {
            timeout-ms = <120>;
            key-positions = <16 17 18>;
            bindings = <&kp MINUS>;
            layers = <0 1 2>;
        };
                           combo_pipe {
            timeout-ms = <120>;
            key-positions = < 14 24>;
            bindings = <&kp PIPE>;
            layers = <0 1 2>;
        };
                   combo_dollar {
            timeout-ms = <120>;
            key-positions = <3 14>;
            bindings = <&kp DLLR>;
            layers = <0 1 2>;
        };

        /*
        * LAYER COMBOS
        */
            combo_tmux {
            timeout-ms = <170>;
            key-positions = <1 2 3>;
            bindings = <&sl tmux_l>;
            layers = <0 1 2>;
        };
    };


    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };
         skq: sticky_key_quick_release {
        compatible = "zmk,behavior-sticky-key";
        label = "STICKY_KEY_QUICK_RELEASE";
        #binding-cells = <1>;
        bindings = <&kp>;
        release-after-ms = <1000>;
        quick-release;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
             &kp r    &kp s     &kp n     &kp t          &lt 4 g       &lt 1 w    &kp u      &kp e     &kp a    &kp i
//             &kp Q      &kp C      &kp H      &kp P      &kp V         &kp K      &kp Y      &kp O      &kp J      &kp SQT
             &kp r    &kp s     &kp n     &kp t          &lt 4 g       &lt 1 w    &kp u      &kp e     &kp a    &kp i
             &kp x       &kp m     &kp l     &kp d       &kp b         &kp z      &kp f      &kp COMMA    &kp DOT    &kp FLSH
                                        &skq LSHIFT  &sl 2  	   	   &kp SPACE  &sl helper_l
            >;
        };

        right_layer {
            bindings = <
        //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
            &kp N5       &kp N6    &kp N7     &kp N8       &kp N9	  &kp EQUAL   &kp LBKT &none      &sys_reset   &bootloader
        //│  5       │  6       │  7       │  8       │  9       │   │  =       │  [       │          │          │          │
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
            &kp N0   &kp N1    &kp N2  &kp N3   &lt 4 N4 		    &trans      &kp LGUI &kp RBKT   &none   &none  
        //│  0       │  1       │  2       │  3       │  4       │   │          │  RGUI    │  ]       │          │          │
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
           &kp COMMA   &kp DOT 	 &sk LGUI   &none       &none  	      &kp MINUS   &kp RBKT &none      &none   &none  
        //│  ,       │  .       │  RGUI    │          │          │   │  -       │  ]       │          │          │          │
        //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                             &trans     &kp trans        &trans     &trans
        //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
            >;
        };

        left_layer {
            bindings = <
        //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
        //│          │  [       │  {       │  }       │          │   │  ^       │  (       │  )       │  ]       │  ~       │
            &trans     &kp LBKT   &kp LBRC   &kp RBRC   &trans         &kp CARET  &kp LPAR   &kp RPAR   &kp RBKT   &kp TILDE
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│  !       │  @       │  #       │  $       │  %       │   │  *       │  -       │  =       │  \       │  `       │
            &kp EXCL   &kp AT     &kp HASH   &kp DLLR   &kp PRCNT      &kp ASTRK  &kp MINUS  &kp EQUAL  &kp BSLH   &kp GRAVE
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│          │          │          │          │          │   │  &       │  _       │  +       │  │       │          │
            &trans     &trans     &trans     &trans     &trans         &kp AMPS   &kp UNDER  &kp PLUS   &kp PIPE   &trans
        //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                             &trans     &trans         &trans     &trans
        //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
            >;
        };

        tri_layer {
            bindings = <
        //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
        //│ RESET    │          │          │          │PROFILE 0 │   │          │          │          │          │  RESET   │
           &sys_reset  &trans     &trans     &trans    &bt BT_SEL 0    &trans     &trans     &trans     &trans    &sys_reset
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│BOOTLOADER│          │          │          │PROFILE 1 │   │          │          │          │          │BOOTLOADER│
          &bootloader  &trans     &trans     &trans    &bt BT_SEL 1    &trans     &trans     &trans     &trans    &bootloader
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
        //│          │          │          │ CLEAR BT │PROFILE 2 │   │          │          │          │          │          │
            &trans     &trans     &trans    &bt BT_CLR &bt BT_SEL 2    &trans     &trans     &trans     &trans     &trans
        //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                             &trans     &trans         &trans     &trans
        //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
            >;
        };
    };
};