// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Home row mods macro

#define default_l 0
#define nums_l    1
#define syms_l    2
#define arrows_l  3
#define tmux_l    4
#define helper_l  5
#define window_l  6
#define backup_l  7


// #define HRML(k1,k2,k3,k4) &ht LSHFT k1  &ht LALT k2  &ht LCTRL k3  &ht LGUI k4
// #define HRMR(k1,k2,k3,k4) &ht RGUI k1  &ht RCTRL k2  &ht RALT k3  &ht RSHFT k4

/ {

        macros {
            ZMK_MACRO(ff_tab,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp LG(L) &kp PERCENT &kp SPACE >;
                )
            ZMK_MACRO(t_0,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp N0 >;
                )

            ZMK_MACRO(t_1,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp N1>;
                )

            ZMK_MACRO(t_2,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp N2 >;
                )

            ZMK_MACRO(t_3,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp N3>;
                )

            ZMK_MACRO(t_4,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp N4 >;
                )

            ZMK_MACRO(t_5,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp N5 >;
                )

            ZMK_MACRO(t_6,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp N6 >;
                )

            ZMK_MACRO(t_7,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp N7 >;
                )

            ZMK_MACRO(t_8,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp N8 >;
                )

            ZMK_MACRO(t_9,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp N9 >;
                )

            ZMK_MACRO(t_LEFT,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp LEFT >;
                )

            ZMK_MACRO(t_RIGHT,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp RIGHT >;
                )

            ZMK_MACRO(t_UP,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp UP >;
                )

            ZMK_MACRO(t_DOWN,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp DOWN >;
                )

            ZMK_MACRO(t_scroll,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp PG_UP >;
                )

            ZMK_MACRO(t_hsplit,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp MINUS >;
                )

            ZMK_MACRO(t_vsplit,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp PIPE >;
                )


            ZMK_MACRO(t_kwin,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp AMPS >;
                )
            ZMK_MACRO(t_new,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp C >;
                )

            ZMK_MACRO(t_name,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp COMMA >;
                )

            ZMK_MACRO(t_kpane,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp X >;
                )
            ZMK_MACRO(skshft,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&sk LSHIFT >;
                )


            ZMK_MACRO(t_f1,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp F1>;
                )

            ZMK_MACRO(t_f2,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp F2 >;
                )

            ZMK_MACRO(t_f3,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp F3>;
                )

            ZMK_MACRO(t_f4,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &sl 5 >;
                )

            ZMK_MACRO(t_f5,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp F5 >;
                )

            ZMK_MACRO(t_f6,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp F6 >;
                )

            ZMK_MACRO(t_f7,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp F7 >;
                )

            ZMK_MACRO(t_f8,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp F8 >;
                )

            ZMK_MACRO(t_f9,
                    wait-ms = <30>;
                    tap-ms = <40>;
                    bindings = <&kp RC(A) &kp F9 >;
                )

                
    };
    combos {
        compatible = "zmk,combos";
        combo_enter {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp ENTER>;
            require-prior-idle-ms = <100>;
            layers = <0 1 2>;
        };
        combo_esc {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp ESC>;
            layers = <0 1 2>;
        };
         combo_sk_alt {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&sk LALT>;
            layers = <0 1 2>;
        };
         combo_iterm {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp LC(BSLH)>;
            layers = <0 1 2>;
        };
         combo_sk_ctrl {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&sk LCTRL>;
            layers = <0 1 2>;
        };
        
         combo_backslash {
            timeout-ms = <50>;
            key-positions = <5 6>;
            bindings = <&kp BSLH>;
            layers = <0 1 2 8>;
        };
         combo_backspace {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp BACKSPACE>;
            layers = <0 1 2 8>;
        };
        combo_backspace_fast {
            timeout-ms = <15>;
            key-positions = <17 18>;
            bindings = <&kp BACKSPACE>;
            layers = <0 3>;
        };
        
            combo_repeat {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&key_repeat>;
            layers = <0 1 2>;
        };
            combo_repeat_artsey {
            timeout-ms = <50>;
            key-positions = <16 26>;
            bindings = <&key_repeat>;
            layers = <3>;
        };
         combo_sk_lgui {
            timeout-ms = <100>;
            key-positions = <2 12>;
            bindings = <&sk LGUI>;
            layers = <0 1 2>;
        };
         combo_sk_rgui {
            timeout-ms = <100>;
            key-positions = <7 17>;
            bindings = <&sk RGUI>;
            layers = <0 1 2 3>;
        };
        
            combo_tab {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&kp TAB>;
            layers = <0 1 2>;
        };
        
            combo_colon {
            timeout-ms = <100>;
            key-positions = <17 27>;
            bindings = <&kp COLN>;
            layers = <0 1 2>;
        };



        
        
           combo_meh_layer {
            timeout-ms = <50>;
            key-positions = <3 13>;
            bindings = <&sl 7>;
            layers = <0 1 2>;
        };
           combo_copy {
            timeout-ms = <120>;
            key-positions = <21 23>;
            bindings = <&kp LG(C)>;
            layers = <0 1 2>;
        };
           combo_alfred {
            timeout-ms = <50>;
            key-positions = <6 16>;
            bindings = <&kp LA(SPACE)>;
            layers = <0 1 2 3>;
        };
           combo_paste {
            timeout-ms = <120>;
            key-positions = <21 22 23>;
            bindings = <&kp LG(V)>;
            layers = <0 1 2>;
        };
            combo_caps_word {
            timeout-ms = <120>;
            key-positions = <11 12 13>;
            bindings = <&caps_word>;
            layers = <0 1 2>;
        };
        /*
        * SYMBOL COMBOS
        */
           combo_lbrc {
            timeout-ms = <120>;
            key-positions = <2 3>;
            bindings = <&kp LBRC>;
            layers = <0 1 2>;
        };
                   combo_rbrc {
            timeout-ms = <120>;
            key-positions = <3 4>;
            bindings = <&kp RBRC >;
            layers = <0 1 2>;
        };
                   combo_rprn {
            timeout-ms = <50>;
            key-positions = <6 7>;
            bindings = <&kp LPRN>;
            layers = <0 1 2 8>;
        };
                   combo_lbrn {
            timeout-ms = <120>;
            key-positions = <7 8>;
            bindings = <&kp RPRN>;
            layers = <0 1 2 8>;
        };
                   combo_qstn {
            timeout-ms = <120>;
            key-positions = <1 11>;
            bindings = <&kp QMARK>;
            layers = <0 1 2>;
        };
                   combo_exclm {
            timeout-ms = <120>;
            key-positions = <11 21>;
            bindings = <&kp EXCL>;
            layers = <0 1 2>;
        };
                   combo_rbrk {
            timeout-ms = <120>;
            key-positions = <12 21>;
            bindings = <&kp LBKT>;
            layers = <0 1 2>;
        };
        combo_emailat {
            timeout-ms = <120>;
            key-positions = <15 6>;
            bindings = <&kp AT>;
            layers = <0 1 2>;
        };
        combo_carrot {
            timeout-ms = <120>;
            key-positions = <2 11>;
            bindings = <&kp CARET>;
            layers = <0 1 2>;
        };
                   combo_lbrk {
            timeout-ms = <120>;
            key-positions = <12 23>;
            bindings = <&kp RBKT>;
            layers = <0 1 2>;
        };
                   combo_underscore {
            timeout-ms = <120>;
            key-positions = <23 24>;
            bindings = <&kp UNDER>;
            layers = <0 1 2>;
        };
                     combo_equal {
            timeout-ms = <120>;
            key-positions = <26 27>;
            bindings = <&kp EQUAL>;
            layers = <0 1 2>;
        };
                   combo_ast {
            timeout-ms = <120>;
            key-positions = <25 16 >;
            bindings = <&kp ASTERISK>;
            layers = <0 1 2>;
        };
                   combo_hash {
            timeout-ms = <120>;
            key-positions = <8 18>;
            bindings = <&kp HASH>;
            layers = <0 1 2>;
        };
                   combo_fslash {
            timeout-ms = <120>;
            key-positions = <16 26>;
            bindings = <&kp FSLH>;
            layers = <0 1 2>;
        };
        
                   combo_plus {
            timeout-ms = <120>;
            key-positions = <25 26>;
            bindings = <&kp PLUS>;
            layers = <0 1 2>;
        };
                   combo_percent {
            timeout-ms = <120>;
            key-positions = <18 28>;
            bindings = <&kp PERCENT>;
            layers = <0 1 2>;
        };
                   combo_semicolon {
            timeout-ms = <120>;
            key-positions = <4 14>;
            bindings = <&kp SEMICOLON >;
            layers = <0 1 2>; 
        };
          
                   combo_tilda {
            timeout-ms = <120>;
            key-positions = <2 13>;
            bindings = <&kp TILDE>;
            layers = <0 1 2>;
        };
                   combo_dash {
            timeout-ms = <120>;
            key-positions = <16 17 18>;
            bindings = <&kp MINUS>;
            layers = <0 1 2>;
        };
                           combo_pipe {
            timeout-ms = <120>;
            key-positions = < 14 24>;
            bindings = <&kp PIPE>;
            layers = <0 1 2>;
        };
                   combo_dollar {
            timeout-ms = <120>;
            key-positions = <3 14>;
            bindings = <&kp DLLR>;
            layers = <0 1 2>;
        };

        /*
        * LAYER COMBOS
        */
            combo_tmux {
            timeout-ms = <170>;
            key-positions = <1 2 3>;
            bindings = <&sl tmux_l>;
            layers = <0 1 2>;
        };
    };


    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };
         skq: sticky_key_quick_release {
        compatible = "zmk,behavior-sticky-key";
        label = "STICKY_KEY_QUICK_RELEASE";
        #binding-cells = <1>;
        bindings = <&kp>;
        release-after-ms = <1000>;
        quick-release;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
             &kp Q      &kp C      &kp H      &kp P      &kp V         &kp K      &kp Y      &kp O      &kp J      &kp SQT
             &kp R    &kp S     &kp N     &kp T          &lt 4 G       &lt 1 W    &kp U      &kp E     &kp A    &kp I
             &kp X       &kp M     &kp L     &kp D       &kp B         &kp Z      &kp F      &kp COMMA    &kp DOT    &kp FSLH
                                        &skq LSHIFT  &sl 2  	   	   &kp SPACE  &sl helper_l
            >;
        };

        right_layer {
            bindings = <
        //╭──────────┬──────────┬──────────┬──────────┬──────────╮   ╭──────────┬──────────┬──────────┬──────────┬──────────╮
            &kp N5       &kp N6    &kp N7     &kp N8       &kp N9	  &kp EQUAL   &kp LBKT &none      &sys_reset   &bootloader
        //│  5       │  6       │  7       │  8       │  9       │   │  =       │  [       │          │          │          │
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
            &kp N0   &kp N1    &kp N2  &kp N3   &lt 4 N4 		    &trans      &kp LGUI &kp RBKT   &none   &none  
        //│  0       │  1       │  2       │  3       │  4       │   │          │  RGUI    │  ]       │          │          │
        //├──────────┼──────────┼──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┼──────────┼──────────┤
           &kp COMMA   &kp DOT 	 &sk LGUI   &none       &none  	      &kp MINUS   &kp RBKT &none      &none   &none  
        //│  ,       │  .       │  RGUI    │          │          │   │  -       │  ]       │          │          │          │
        //╰──────────┴──────────┴──────────┼──────────┼──────────┤   ├──────────┼──────────┼──────────┴──────────┴──────────╯
                                             &trans     &trans        &trans     &trans
        //                                 ╰──────────┴──────────╯   ╰──────────┴──────────╯
            >;
        };

        syms_layer {
		bindings = <                                                                                                     
		&sk LGUI    &kp AT      &kp LBRC    &kp RBRC    &kp SEMICOLON   &kp GRAVE     &kp CARET &kp HASH    &kp QMARK  &kp PERCENT 
		&kp LBKT    &kp RBKT    &kp LPAR    &kp RPAR    &mo 4 		      &lt 1 EQUAL   &kp PLUS &kp MINUS    &kp FSLH   &kp ASTERISK
		&sk LSHIFT  &none 	    &kp LG(C)    &kp LG(V)    &kp PIPE 	                &kp AMPS      &kp UNDER &kp DLLR    &kp EXCL   &kp TILDE 
		>;
        };
        artsey_layer {
		bindings = <
		&t_5        &t_6       &t_7         &t_8        &t_9    			    &kp RC(B)       &none       &none              &none        &t_scroll  
		&kp A        &kp R       &kp S         &kp T        &none 			     &none          &kp T        &kp S       &kp R         &kp A        
		&kp O        &kp I       &kp E         &kp N        &none                &none           &kp N        &kp E       &kp I         &kp O        
					                        &to 0      &kp SPACE 			        &trans  &trans 
		>;
		};	

		arrows_layer {
		bindings = <
		&bootloader &sys_reset       &none       &kp DEL       &none    			    &kp LG(LEFT)    &kp LA(LEFT)  &kp LA(RIGHT)    &kp LG(RIGHT) &kp LG(UP) 
		&none       &none       &none       &kp LSHIFT   &trans 			        &kp LEFT        &kp DOWN      &kp UP           &kp RIGHT     &trans 
		&none       &none       &none       &kp LALT       &none                   &kp BSLH        &trans        &trans           &trans        &kp LG(DOWN)
					                        &trans      &kp LCTRL                  &kp SPACE  &trans 
		>;
		};	

        tmux_layer {
		bindings = <
		&t_5        &t_6       &t_7         &t_8        &t_9    			    &kp RC(B)       &t_f5       &t_f6              &t_f7        &t_scroll  
		&t_0        &t_1       &t_2         &t_3        &t_4 			        &t_LEFT         &t_DOWN     &t_UP              &t_RIGHT     &t_f8 
		&t_hsplit   &t_f1       &t_f2       &t_f3     &t_vsplit               &t_kpane        &t_new      &t_name            &t_f9        &none 
					                        &t_f5      &t_f4 			        &trans  &trans 
		>;
		};	
		
		helper_layer {
		bindings = <
		&kp LC(LS(F14)) &kp LC(LS(F15)) &kp LC(LS(F16)) &kp LC(LS(F17)) &kp LC(LS(F18)) 		    &bt BT_SEL 0    &bt BT_SEL 1 &bt BT_SEL 2      &bt BT_SEL 3 &bt BT_CLR
		&kp LC(LS(N0)) &kp LC(LS(N6)) &kp LC(LS(N7)) &kp LC(LS(N8)) &kp LC(LS(N9))  		    &kp LEFT        &to default_l      &to backup_l             &kp RIGHT   &kp K_MUTE 
		&kp LC(LS(N1))  &kp LC(LS(N2)) &kp LC(LS(N3)) &kp LC(LS(N4)) &kp LC(LS(N5))   			&kp C_PREV  &kp C_PP  &kp C_NEXT           &kp C_VOL_UP  &kp C_VOL_DN   
					                        &trans      &trans  			    &trans &trans 
		>;
		};	
        window_layer {
		bindings = <
        &kp LC(LS(LA(Q)))    &kp LC(LS(LA(W)))    &kp LC(LS(LA(F)))    &kp LC(LS(LA(P)))    &kp LC(LS(LA(B)))            &kp LC(LS(LA(J)))    &kp LC(LS(LA(L)))   &kp LC(LS(LA(U)))        &kp LC(LS(LA(Y))) &kp LC(LS(LA(SQT)))
        &kp LC(LS(LA(A)))    &kp LC(LS(LA(R)))    &kp LC(LS(LA(S)))    &kp LC(LS(LA(T)))    &kp LC(LS(LA(G)))            &kp LC(LS(LA(M)))    &kp LC(LS(LA(N)))   &kp LC(LS(LA(E)))       &kp LC(LS(LA(I)))   &kp LC(LS(LA(O)))
        &kp LC(LS(LA(Z)))    &kp LC(LS(LA(X)))    &kp LC(LS(LA(C)))    &kp LC(LS(LA(D)))    &kp LC(LS(LA(V)))            &kp LC(LS(LA(K)))    &kp LC(LS(LA(H)))   &kp LC(LS(LA(COMMA)))      &kp LC(LS(LA(DOT))) &kp LC(LS(LA(SLASH)))
                                                                       &kp LC(LS(LA(EQUAL))) &kp LC(LS(LA(AMPS)))        &kp LC(LS(LA(SPACE))) &kp LC(LS(LA(EXCL))) 
		>;
        };
         backup_layer {
            bindings = <
             &kp Q      &kp W      &kp F      &kp P      &kp B         &kp J      &kp L      &kp U      &kp Y      &kp SQT
             &kp A    &kp R     &kp S     &kp T          &lt 4 G       &lt 1 M    &kp N      &kp E     &kp I    &kp O
             &kp Z       &kp X     &kp C     &kp D       &kp V         &kp K      &kp H      &kp COMMA    &kp DOT    &kp FSLH
                                        &skq LSHIFT  &sl 2  	   	   &kp SPACE  &sl helper_l
            >;
        };

    };
};