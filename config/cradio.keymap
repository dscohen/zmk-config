/*
 * CopyRIGHT (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define default_layer 0
#define nums_layer    1
#define syms_layer    2
#define arrows_layer  3
#define tmux_layer    4
#define helper_layer  5
#define window_layer  6

/ {
    macros {
ZMK_MACRO(t_0,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(B) &kp NUM_0 >;
    )

ZMK_MACRO(t_1,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(B) &kp NUM_1>;
    )

ZMK_MACRO(t_2,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(B) &kp NUM_2 >;
    )

ZMK_MACRO(t_3,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(B) &kp NUM_3>;
    )

ZMK_MACRO(t_4,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(B) &kp NUM_4 >;
    )

ZMK_MACRO(t_5,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(B) &kp NUM_5 >;
    )

ZMK_MACRO(t_6,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(B) &kp NUM_6 >;
    )

ZMK_MACRO(t_7,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(B) &kp NUM_7 >;
    )

ZMK_MACRO(t_8,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(B) &kp NUM_8 >;
    )

ZMK_MACRO(t_9,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(B) &kp NUM_9 >;
    )

ZMK_MACRO(t_LEFT,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(B) &kp LEFT >;
    )

ZMK_MACRO(t_RIGHT,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(B) &kp RIGHT >;
    )

ZMK_MACRO(t_UP,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(B) &kp UP >;
    )

ZMK_MACRO(t_DOWN,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(B) &kp DOWN >;
    )

ZMK_MACRO(t_scroll,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(B) &kp PG_UP >;
    )

ZMK_MACRO(t_hsplit,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(B) &kp MINUS >;
    )

ZMK_MACRO(t_vsplit,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(B) &kp PIPE2 >;
    )

ZMK_MACRO(t_kwin,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(B) &kp AMPS >;
    )
ZMK_MACRO(t_new,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(B) &kp C >;
    )

ZMK_MACRO(t_name,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(B) &kp COMMA >;
    )

ZMK_MACRO(t_kpane,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(B) &kp X >;
    )
};
};
&mt {
  //  flavor = "tap-preferred";
   // tapping_term_ms = <200>;
};

/ { 

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp ESC>;
        };
         combo_sk_alt {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&sk LALT>;
        };
         combo_iterm {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp LC(BSLH)>;
        };
         combo_sk_ctrl {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&sk LCTL>;
        };
        
         combo_backslash {
            timeout-ms = <50>;
            key-positions = <5 6>;
            bindings = <&kp BSLH>;
        };
         combo_backspace {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp BACKSPACE>;
        };
        
            combo_enter {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&kp RET>;
        };
         combo_sk_lgui {
            timeout-ms = <50>;
            key-positions = <2 12>;
            bindings = <&sk LGUI>;
        };
         combo_sk_rgui {
            timeout-ms = <50>;
            key-positions = <7 17>;
            bindings = <&sk RGUI>;
        };
        
            combo_tab {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&kp TAB>;
        };
        
            combo_colon {
            timeout-ms = <50>;
            key-positions = <17 27>;
            bindings = <&kp COLN>;
        };
        
        
           combo_meh_layer {
            timeout-ms = <50>;
            key-positions = <3 13>;
            bindings = <&sl window_layer>;
        };
           combo_copy {
            timeout-ms = <80>;
            key-positions = <21 23>;
            bindings = <&kp LG(C)>;
        };
           combo_alfred {
            timeout-ms = <50>;
            key-positions = <6 16>;
            bindings = <&kp LA(SPACE)>;
        };
           combo_paste {
            timeout-ms = <80>;
            key-positions = <21 22 23>;
            bindings = <&kp LG(V)>;
        };
        
        

        
    };

        keymap {
                compatible = "zmk,keymap";
                
       		default_layer {
		bindings = <
		&kp Q &kp W &kp F &kp P &kp B                           &kp J            &kp L  &kp U    &kp Y   &kp QUOT
		&kp A &kp R &kp S &kp T &lt arrows_layer G 		   	    &lt nums_layer M &kp N &kp E &kp I &kp O    
		&mt LSFT Z &kp X &kp C &kp D &kp V				        &kp K            &kp H  &kp COMMA &kp DOT &mt LSFT RET
          				&key_repeat &sl 2  	        			&kp SPC &mo helper_layer 
		>;
		};

       		nums_layer {
		bindings = <
		&kp NUM_5   &kp NUM_6    &kp NUM_7    &kp NUM_8    &kp NUM_9		            &kp EQL   &kp LBKT &none  &none  &none
		&kp NUM_0   &kp NUM_1    &kp NUM_2    &kp NUM_3    &lt arrows_layer NUM_4 		&trans   &kp LGUI  &kp RBKT &none   &none 
		&kp CMMA    &kp DOT 	&sk LGUI      &none           &none  	                &kp MINUS &kp RBKT &none  &none   &none  
					                            &trans  &sl syms_layer                &trans &trans 
		>;
		};

        syms_layer {
		bindings = <                                                                                                     
		&ls LSHIFT   &kp AT    &kp LBRC    &kp RBRC    &kp SEMICOLON		            &kp GRAVE              &kp CARET &none &kp HASH &none 
		&kp LBKT   &kp RBKT    &kp LPRN    &kp RPRN    &mo arrows_layer 		&lt nums_layer EQL   &kp MINUS  &kp PLUS &kp FSLH  &kp PERCENT
		&none    &none 	&os LGUI  &kp NON_US_HASH  &kp PIPE 	                &kp AMPS            &kp UNDER &kp DLLR &kp EXCL  &kp TILDE 
					                            &trans  &sk LSFT  		             &sk LSFT  &sl tmux_layer 
		>;
		};

		arrows_layer {
		bindings = <
		&none  &none &none &none &none    			&kp LG(LEFT) &kp LA(LEFT)  &kp LALT(RIGHT)  &kp LG(RIGHT)   &kp LG(UP) 
		&none  &none &none &none  &trans 			&kp LEFT &kp DOWN  &kp UP  &kp RIGHT   &trans 
		&none  &none &none &none &none              &kp BSLH  &trans &trans &trans &trans  &kp LG(DOWN)
					            &trans &trans   &kp SPC  &trans 
		>;
		};	

        tmux_layer {
		bindings = <
		&t_5        &t_6 &t_7  &t_8  &t_9    			&kp RC(B) &none &none   &none    &t_scroll  
		&t_0     &t_1  &t_2  &t_3  &t_4 			&t_LEFT &t_DOWN &t_UP &t_RIGHT    &none 
		&t_hsplit  &none &none &none &t_vsplit     			&t_kpane &t_new &t_name &none  &none 
					            &trans &trans 			                    &trans  &trans 
		>;
		};	
		
		helper_layer {
		bindings = <
		&kp LS(F14)  &kp LS(F15)    &kp LS(F16)    &kp LS(F17)    &kp LS(F18) 		&none &none   &none   &none  &none
		&kp LS(F24) &kp LS(F18) &kp LS(F19) &kp LS(F20) &kp LS(F21)  				&kp LEFT &trans  &trans &kp RIGHT &kp K_MUTE 
		&kp LS(F9)  &kp LS(F10)  &kp LS(F11) &kp LS(F12) &kp LS(F13)   				&none &kp C_PREV  &kp C_PP  &kp C_NEXT &trans   
					 &trans &trans  					                                        &trans &trans 
		>;
		};	
        window_layer {
		bindings = <
        &kp LC(LS(LA(Q)))    &kp LC(LS(LA(W)))    &kp LC(LS(LA(F)))    &kp LC(LS(LA(P)))    &kp LC(LS(LA(B)))            &kp LC(LS(LA(J)))    &kp LC(LS(LA(L)))   &kp LC(LS(LA(U)))        &kp LC(LS(LA(Y))) &kp LC(LS(LA(QUOT)))
        &kp LC(LS(LA(A)))    &kp LC(LS(LA(R)))    &kp LC(LS(LA(S)))    &kp LC(LS(LA(T)))    &kp LC(LS(LA(G)))            &kp LC(LS(LA(M)))    &kp LC(LS(LA(N)))   &kp LC(LS(LA(E)))       &kp LC(LS(LA(I)))   &kp LC(LS(LA(O)))
        &kp LC(LS(LA(Z)))    &kp LC(LS(LA(X)))    &kp LC(LS(LA(C)))    &kp LC(LS(LA(D)))    &kp LC(LS(LA(V)))            &kp LC(LS(LA(K)))    &kp LC(LS(LA(H)))   &kp LC(LS(LA(COMMA)))      &kp LC(LS(LA(DOT))) &kp LC(LS(LA(SLSH)))
                        &kp LC(LS(LA(EQL))) &kp LC(LS(LA(AMPS)))                                                                 &kp LC(LS(LA(SPACE))) &kp LC(LS(LA(EXCL))) 
		>;
		}; 
	};
};
