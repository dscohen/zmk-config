/*
 * CopyRIGHT (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define default_layer 0
#define nums_layer    1
#define syms_layer    2
#define arrows_layer  3
#define tmux_layer    4
#define helper_layer  5
#define window_layer  6

/ {
    macros {
ZMK_MACRO(ff_tab,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp LG(L) &kp PERCENT &kp SPACE >;
    )
ZMK_MACRO(t_0,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(A) &kp NUM_0 >;
    )

ZMK_MACRO(t_1,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(A) &kp NUM_1>;
    )

ZMK_MACRO(t_2,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(A) &kp NUM_2 >;
    )

ZMK_MACRO(t_3,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(A) &kp NUM_3>;
    )

ZMK_MACRO(t_4,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(A) &kp NUM_4 >;
    )

ZMK_MACRO(t_5,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(A) &kp NUM_5 >;
    )

ZMK_MACRO(t_6,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(A) &kp NUM_6 >;
    )

ZMK_MACRO(t_7,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(A) &kp NUM_7 >;
    )

ZMK_MACRO(t_8,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(A) &kp NUM_8 >;
    )

ZMK_MACRO(t_9,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(A) &kp NUM_9 >;
    )

ZMK_MACRO(t_LEFT,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(A) &kp LEFT >;
    )

ZMK_MACRO(t_RIGHT,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(A) &kp RIGHT >;
    )

ZMK_MACRO(t_UP,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(A) &kp UP >;
    )

ZMK_MACRO(t_DOWN,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(A) &kp DOWN >;
    )

ZMK_MACRO(t_scroll,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(A) &kp PG_UP >;
    )

ZMK_MACRO(t_hsplit,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(A) &kp MINUS >;
    )

ZMK_MACRO(t_vsplit,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(A) &kp PIPE >;
    )


ZMK_MACRO(t_kwin,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(A) &kp AMPS >;
    )
ZMK_MACRO(t_new,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(A) &kp C >;
    )

ZMK_MACRO(t_name,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(A) &kp COMMA >;
    )

ZMK_MACRO(t_kpane,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(A) &kp X >;
    )
ZMK_MACRO(skshft,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&sk LSHIFT >;
    )

ZMK_MACRO(t_f9,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(A) &kp NUM_0 >;
    )

ZMK_MACRO(t_f1,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(A) &kp F1>;
    )

ZMK_MACRO(t_f2,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(A) &kp F2 >;
    )

ZMK_MACRO(t_f3,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(A) &kp F3>;
    )

ZMK_MACRO(t_f4,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(A) &sl 5 >;
    )

ZMK_MACRO(t_f5,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(A) &kp F5 >;
    )

ZMK_MACRO(t_f6,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(A) &kp F6 >;
    )

ZMK_MACRO(t_f7,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(A) &kp F7 >;
    )

ZMK_MACRO(t_f8,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(A) &kp F8 >;
    )

ZMK_MACRO(t_f9,
        wait-ms = <30>;
        tap-ms = <40>;
        bindings = <&kp RC(A) &kp F9 >;
    )

    
};
};
&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};


/ { 

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp ESC>;
            layers = <0 1 2>;
        };
         combo_sk_alt {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&sk LALT>;
            layers = <0 1 2>;
        };
         combo_iterm {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp LC(BSLH)>;
            layers = <0 1 2>;
        };
         combo_sk_ctrl {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&tdLCTL>;
            layers = <0 1 2>;
        };
        
         combo_backslash {
            timeout-ms = <50>;
            key-positions = <5 6>;
            bindings = <&kp BSLH>;
            layers = <0 1 2>;
        };
         combo_backspace {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp BACKSPACE>;
            layers = <0 1 2>;
        };
        
            combo_repeat {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&key_repeat>;
            layers = <0 1 2>;
        };
         combo_sk_lgui {
            timeout-ms = <100>;
            key-positions = <2 12>;
            bindings = <&sk LGUI>;
            layers = <0 1 2>;
        };
         combo_sk_rgui {
            timeout-ms = <100>;
            key-positions = <7 17>;
            bindings = <&sk RGUI>;
            layers = <0 1 2 3>;
        };
        
            combo_tab {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&kp TAB>;
            layers = <0 1 2>;
        };
        
            combo_colon {
            timeout-ms = <100>;
            key-positions = <17 27>;
            bindings = <&kp COLN>;
            layers = <0 1 2>;
        };



        
        
           combo_meh_layer {
            timeout-ms = <50>;
            key-positions = <3 13>;
            bindings = <&sl 7>;
            layers = <0 1 2>;
        };
           combo_copy {
            timeout-ms = <120>;
            key-positions = <21 23>;
            bindings = <&kp LG(C)>;
            layers = <0 1 2>;
        };
           combo_alfred {
            timeout-ms = <50>;
            key-positions = <6 16>;
            bindings = <&kp LA(SPACE)>;
            layers = <0 1 2 3>;
        };
           combo_paste {
            timeout-ms = <120>;
            key-positions = <21 22 23>;
            bindings = <&kp LG(V)>;
            layers = <0 1 2>;
        };
            combo_caps_word {
            timeout-ms = <120>;
            key-positions = <11 12 13>;
            bindings = <&caps_word>;
            layers = <0 1 2>;
        };
        /*
        * SYMBOL COMBOS
        */
           combo_lbrc {
            timeout-ms = <120>;
            key-positions = <2 3>;
            bindings = <&kp LBRC>;
            layers = <0 1 2>;
        };
                   combo_rbrc {
            timeout-ms = <120>;
            key-positions = <3 4>;
            bindings = <&kp RBRC >;
            layers = <0 1 2>;
        };
                   combo_rprn {
            timeout-ms = <50>;
            key-positions = <6 7>;
            bindings = <&kp LPRN>;
            layers = <0 1 2>;
        };
                   combo_lbrn {
            timeout-ms = <120>;
            key-positions = <7 8>;
            bindings = <&kp RPRN>;
            layers = <0 1 2>;
        };
                   combo_qstn {
            timeout-ms = <120>;
            key-positions = <1 11>;
            bindings = <&kp QMARK>;
            layers = <0 1 2>;
        };
                   combo_exclm {
            timeout-ms = <120>;
            key-positions = <11 21>;
            bindings = <&kp EXCL>;
            layers = <0 1 2>;
        };
                   combo_rbrk {
            timeout-ms = <120>;
            key-positions = <12 22>;
            bindings = <&kp LBKT>;
            layers = <0 1 2>;
        };
                   combo_lbrk {
            timeout-ms = <120>;
            key-positions = <13 23>;
            bindings = <&kp RBKT>;
            layers = <0 1 2>;
        };
                   combo_underscore {
            timeout-ms = <120>;
            key-positions = <23 24>;
            bindings = <&kp UNDER>;
            layers = <0 1 2>;
        };
                     combo_equal {
            timeout-ms = <120>;
            key-positions = <26 27>;
            bindings = <&kp EQUAL>;
            layers = <0 1 2>;
        };
                   combo_ast {
            timeout-ms = <120>;
            key-positions = <5 15 >;
            bindings = <&kp ASTERISK>;
            layers = <0 1 2>;
        };
                   combo_hash {
            timeout-ms = <120>;
            key-positions = <8 18>;
            bindings = <&kp HASH>;
            layers = <0 1 2>;
        };
                   combo_fslash {
            timeout-ms = <120>;
            key-positions = <16 26>;
            bindings = <&kp FSLH>;
            layers = <0 1 2>;
        };
        
                   combo_plus {
            timeout-ms = <120>;
            key-positions = <25 26>;
            bindings = <&kp PLUS>;
            layers = <0 1 2>;
        };
                   combo_percent {
            timeout-ms = <120>;
            key-positions = <18 28>;
            bindings = <&kp PERCENT>;
            layers = <0 1 2>;
        };
                   combo_semicolon {
            timeout-ms = <120>;
            key-positions = <4 14>;
            bindings = <&kp SEMICOLON >;
            layers = <0 1 2>; 
        };
          
                   combo_tilda {
            timeout-ms = <120>;
            key-positions = <14 24>;
            bindings = <&kp TILDE>;
            layers = <0 1 2>;
        };
                   combo_dash {
            timeout-ms = <120>;
            key-positions = <16 17 18>;
            bindings = <&kp MINUS>;
            layers = <0 1 2>;
        };
                   combo_dollar {
            timeout-ms = <120>;
            key-positions = <15 25>;
            bindings = <&kp DLLR>;
            layers = <0 1 2>;
        };

        /*
        * LAYER COMBOS
        */

                   combo_tmux {
            timeout-ms = <170>;
            key-positions = <1 2 3>;
            bindings = <&sl 5>;
            layers = <0 1 2>;
        };
                         combo_artsey {
            timeout-ms = <170>;
            key-positions = <6 7 8 9>;
            bindings = <&tog 3>;
            layers = <0 1 2 3>;
        };

          
          
 

        /*
        * ARTSEY COMBOS
        */
        
        /* 
        * put where h is
        */
            artsey_s { 
            timeout-ms = <120>;
            key-positions = <26 28>;
            bindings = <&kp S>;
            layers = <3>;
        };


        /* 
        * put where ly is
        */
            artsey_a { 
            timeout-ms = <120>;
            key-positions = <6 8>;
            bindings = <&kp A>;
            layers = <3>;
        };
        /* 
        * put where jl is
        */
            artsey_t { 
            timeout-ms = <120>;
            key-positions = <5 6>;
            bindings = <&kp T>;
            layers = <3>;
        };

        /* 
        * put where . is
        */
            artsey_r { 
            timeout-ms = <120>;
            key-positions = <16 2>;
            bindings = <&kp R>;
            layers = <3>;
        };


            artsey_p {
            timeout-ms = <120>;
            key-positions = <20 21 23>;
            bindings = <&kp P>;
            layers = <3>;
        };
            artsey_q {
            timeout-ms = <120>;
            key-positions = <16 18 19>;
            bindings = <&kp Q>;
            layers = <3>;
        };

            artsey_v {
            timeout-ms = <120>;
            key-positions = <17 19>;
            bindings = <&kp V>;
            layers = <3>;
        };
            artsey_w {
            timeout-ms = <120>;
            key-positions = <16 19>;
            bindings = <&kp W>;
            layers = <3>;
        };
            artsey_x {
            timeout-ms = <120>;
            key-positions = <17 18 19>;
            bindings = <&kp X>;
            layers = <3>;
        };
            artsey_z {
            timeout-ms = <120>;
            key-positions = <16 17 18 19>;
            bindings = <&kp Z>;
            layers = <3>;
        };
            artsey_tab {
            timeout-ms = <120>;
            key-positions = <26 17 18 19>;
            bindings = <&kp TAB>;
            layers = <3>;
        };

            artsey_b {
            timeout-ms = <120>;
            key-positions = <26 29>;
            bindings = <&kp B>;
            layers = <3>;
        };
            artsey_c {
            timeout-ms = <120>;
            key-positions = <26 27>;
            bindings = <&kp C>;
            layers = <3>;
        };
            artsey_d {
            timeout-ms = <120>;
            key-positions = <16 17 18>;
            bindings = <&kp D>;
            layers = <3>;
        };
            artsey_f {
            timeout-ms = <120>;
            key-positions = <16 17>;
            bindings = <&kp F>;
            layers = <3>;
        };
            artsey_g {
            timeout-ms = <120>;
            key-positions = <17 18>;
            bindings = <&kp G>;
            layers = <3>;
        };



            artsey_bang {
            timeout-ms = <120>;
            key-positions = <18 28>;
            bindings = <&kp EXCL>;
            layers = <3>;
        };
            artsey_bs {
            timeout-ms = <120>;
            key-positions = <17 26>;
            bindings = <&kp G>;

            layers = <3>;
        };

        

        
    };

    behaviors {
        shft_rpt: repeat_mod {
      compatible = "zmk,behavior-hold-tap";
      label = "REPEAT_MOD";
      #binding-cells = <2>;
      flavor = "hold-preferred";
      tapping-term-ms = <270>;
      bindings = <&sk>, <&key_repeat>;
    };
    skq: sticky_key_quick_release {
        compatible = "zmk,behavior-sticky-key";
        label = "STICKY_KEY_QUICK_RELEASE";
        #binding-cells = <1>;
        bindings = <&kp>;
        release-after-ms = <1000>;
        quick-release;
        };
    tdRT: tap_dance_right_thumb {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&sl 6>, <&to 6>, <&to 0>;
    };
    tdLCTL: tap_dance_lctl {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_LCTL";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&sk LCTL>, <&sl 5>;
    };
    phtr: positional_hold_tap_right {
            compatible = "zmk,behavior-hold-tap";
            label = "POSITIONAL_HOLD_TAP_RIGHT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 >;    // <---[[the W key]]
        };
    phtl: positional_hold_tap_left {
            compatible = "zmk,behavior-hold-tap";
            label = "POSITIONAL_HOLD_TAP_LEFT";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29>;    // <---[[the W key]]
        };
};


        keymap {
                compatible = "zmk,keymap";
                
       		default_layer {
		bindings = <
		&kp Q       &kp W &kp F   &kp P &lt 5 B                           &lt 5 J           &kp L  &kp U        &kp Y   &kp QUOT
		&kp A       &kp R &kp S   &kp T &lt 4 G 		   	            &lt 1 M         &kp N  &kp E        &kp I   &kp O    
		&kp Z       &kp X &kp C   &phtl LSFT D &kp V				            &kp K           &phtr LSFT H  &kp COMMA    &kp DOT &mt LSFT RET
          				&sk LSFT  &sl 2  	        			&kp SPACE &tdRT
		>;
		};

       		nums_layer {
		bindings = <
		&kp NUM_5   &kp NUM_6    &kp NUM_7  &kp NUM_8   &kp NUM_9		        &kp EQUAL   &kp LBKT &none      &reset   &bootloader
		&kp NUM_0   &kp NUM_1    &kp NUM_2  &kp NUM_3   &lt 4 NUM_4 		    &trans      &kp LGUI &kp RBKT   &none   &none 
		&kp COMMA   &kp DOT 	 &sk LGUI   &none       &none  	                &kp MINUS   &kp RBKT &none      &none   &none  
					                        &trans      &trans                 &trans &trans 
		>;
		};

        syms_layer {
		bindings = <                                                                                                     
		&sk LGUI  &kp AT      &kp LBRC    &kp RBRC    &kp SEMICOLON		        &kp GRAVE     &kp CARET &kp HASH    &kp QMARK  &kp PERCENT 
		&kp LBKT    &kp RBKT    &kp LPRN    &kp RPRN    &mo 4 		                &lt 1 EQUAL   &kp PLUS &kp MINUS    &kp FSLH   &kp ASTERISK
		&sk LSHIFT       &none 	    &kp LG(C)    &kp LG(V)    &kp PIPE 	                &kp AMPS      &kp UNDER &kp DLLR    &kp EXCL   &kp TILDE 
					                        &trans      &sk LSFT  		            &trans      &sl 5 
		>;
		};

        artsey_layer {
		bindings = <
		&t_5        &t_6       &t_7         &t_8        &t_9    			    &kp J           &kp L  &kp U        &kp Y   &kp QUOT
		&kp A        &kp R       &kp S         &kp T        &none 			     &kp M         &kp N  &kp E        &kp I   &kp O    
		&kp O        &kp I       &kp E         &kp N        &none                &kp K           &phtr LSFT H  &kp COMMA    &kp DOT &mt LSFT RET       
					                        &to 0      &kp SPACE 			        &kp SPACE  &trans 
		>;
		};	

		arrows_layer {
		bindings = <
		&bootloader &reset       &none       &kp DEL       &none    			    &kp LG(LEFT)    &kp LA(LEFT)  &kp LA(RIGHT)    &kp LG(RIGHT) &kp LG(UP) 
		&none       &none       &none       &kp LSHIFT   &trans 			        &kp LEFT        &kp DOWN      &kp UP           &kp RIGHT     &trans 
		&none       &none       &none       &kp LALT       &none                   &kp BSLH        &trans        &trans           &trans        &kp LG(DOWN)
					                        &trans      &kp LCTL                  &kp SPC  &trans 
		>;
		};	

        tmux_layer {
		bindings = <
		&t_5        &t_6       &t_7         &t_8        &t_9    			    &kp RC(B)       &t_f5       &t_f6              &t_f7        &t_scroll  
		&t_0        &t_1       &t_2         &t_3        &t_4 			        &t_LEFT         &t_DOWN     &t_UP              &t_RIGHT     &t_f8 
		&t_hsplit   &t_f1       &t_f2       &t_f3     &t_vsplit               &t_kpane        &t_new      &t_name            &t_f9        &none 
					                        &trans      &t_f4 			        &trans  &trans 
		>;
		};	
		
		helper_layer {
		bindings = <
		&kp LC(LS(F14)) &kp LC(LS(F15)) &kp LC(LS(F16)) &kp LC(LS(F17)) &kp LC(LS(F18)) 		    &bt BT_SEL 0    &bt BT_SEL 1 &bt BT_SEL 2      &bt BT_SEL 3 &bt BT_CLR
		&kp LC(LS(NUM_0)) &kp LC(LS(NUM_6)) &kp LC(LS(NUM_7)) &kp LC(LS(NUM_8)) &kp LC(LS(NUM_9))  		    &kp LEFT        &trans      &trans             &kp RIGHT   &kp K_MUTE 
		&kp LC(LS(NUM_1))  &kp LC(LS(NUM_2)) &kp LC(LS(NUM_3)) &kp LC(LS(NUM_4)) &kp LC(LS(NUM_5))   			&kp C_PREV  &kp C_PP  &kp C_NEXT           &kp C_VOL_UP  &kp C_VOL_DN   
					                        &trans      &trans  			    &trans &trans 
		>;
		};	
        window_layer {
		bindings = <
        &kp LC(LS(LA(Q)))    &kp LC(LS(LA(W)))    &kp LC(LS(LA(F)))    &kp LC(LS(LA(P)))    &kp LC(LS(LA(B)))            &kp LC(LS(LA(J)))    &kp LC(LS(LA(L)))   &kp LC(LS(LA(U)))        &kp LC(LS(LA(Y))) &kp LC(LS(LA(QUOT)))
        &kp LC(LS(LA(A)))    &kp LC(LS(LA(R)))    &kp LC(LS(LA(S)))    &kp LC(LS(LA(T)))    &kp LC(LS(LA(G)))            &kp LC(LS(LA(M)))    &kp LC(LS(LA(N)))   &kp LC(LS(LA(E)))       &kp LC(LS(LA(I)))   &kp LC(LS(LA(O)))
        &kp LC(LS(LA(Z)))    &kp LC(LS(LA(X)))    &kp LC(LS(LA(C)))    &kp LC(LS(LA(D)))    &kp LC(LS(LA(V)))            &kp LC(LS(LA(K)))    &kp LC(LS(LA(H)))   &kp LC(LS(LA(COMMA)))      &kp LC(LS(LA(DOT))) &kp LC(LS(LA(SLASH)))
                                                                       &kp LC(LS(LA(EQUAL))) &kp LC(LS(LA(AMPS)))        &kp LC(LS(LA(SPACE))) &kp LC(LS(LA(EXCL))) 
		>;
		}; 
	};
};
